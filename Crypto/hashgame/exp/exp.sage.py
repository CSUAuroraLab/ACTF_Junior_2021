

# This file was *autogenerated* from the file exp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_32 = Integer(32); _sage_const_256 = Integer(256); _sage_const_69444099843545663157429813687097031070079259699713394209624552060334679683924 = Integer(69444099843545663157429813687097031070079259699713394209624552060334679683924); _sage_const_91404868204801963538299172115753433950696139669081509476098772951762196709558 = Integer(91404868204801963538299172115753433950696139669081509476098772951762196709558); _sage_const_0 = Integer(0); _sage_const_24 = Integer(24); _sage_const_5 = Integer(5)
from Crypto.Util.number import *
from binascii import hexlify
from sys import argv
from pwn import *

#context.log_level = 'debug'
io = remote(argv[_sage_const_1 ], argv[_sage_const_2 ])

def md9(m):
    n, N = _sage_const_32 , _sage_const_2 **_sage_const_256 
    h = _sage_const_69444099843545663157429813687097031070079259699713394209624552060334679683924 
    g = _sage_const_91404868204801963538299172115753433950696139669081509476098772951762196709558 
    assert(isinstance(m, bytes) and len(m) == n)
    for x in m:
        h = ((h + x) * g) % N
    return long_to_bytes(h)

g = _sage_const_91404868204801963538299172115753433950696139669081509476098772951762196709558 
n = _sage_const_32 
N = _sage_const_2 **_sage_const_256 

A_list = [[N] + [_sage_const_0 ] * n]
for i in range(_sage_const_1 , n + _sage_const_1 ):
    A_list.append([int(pow(g, i - _sage_const_1 , N))] + [int(i == j) for j in range(_sage_const_1 , n + _sage_const_1 )])
# Find hash crash(use LLL/BKZ)
A = Matrix(ZZ, A_list)
AL = A.BKZ(block_size=_sage_const_24 )
for line in AL:
    if line[_sage_const_0 ] == _sage_const_0 :
        delta = list(line[_sage_const_1 :][::-_sage_const_1 ])
        break

for j in range(_sage_const_5 ):
    x1, x2 = [], []
    for i in range(n):
        if delta[i] < _sage_const_0 :
            x1.append(-delta[i] + j)
            x2.append(j)
        else:
            x1.append(j)
            x2.append(delta[i] + j)
    x1 = bytes(x1)
    x2 = bytes(x2)
    if md9(x1) == md9(x2):
        print("[+] {} hash crash has been found".format(j+_sage_const_1 ))
    io.sendlineafter("> ", hexlify(x1))
    io.sendlineafter("> ", hexlify(x2))
io.interactive()
#io.close()

